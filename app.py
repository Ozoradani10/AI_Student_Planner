import os
import streamlit as st
import openai
import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timedelta
import pytz
from dateparser import parse

# ---- Fix watcher issue ----
os.environ["WATCHFILES_FORCE_POLLING"] = "true"

# ---- Page config ----
st.set_page_config(page_title="Pa√Ørent ‚Äî AI Student Planner", page_icon="üìò", layout="centered")

# ---- UI design ----
st.markdown("""
    <style>
    .main {background-color: #f9fbff;}
    .title {
        font-size: 40px;
        font-weight: bold;
        color: white;
        background: linear-gradient(90deg, #4A90E2, #0072FF);
        padding: 25px;
        border-radius: 15px;
        text-align: center;
    }
    .subtitle {
        font-size: 18px;
        color: #555;
        text-align: center;
        margin-top: -10px;
        margin-bottom: 30px;
    }
    </style>
""", unsafe_allow_html=True)

st.markdown('<div class="title">Pa√Ørent ‚Äî AI Student Planner</div>', unsafe_allow_html=True)
st.markdown('<div class="subtitle">Generate structured daily, weekly, or monthly study plans ‚Äî delivered in beautiful HTML emails üìß</div>', unsafe_allow_html=True)

# ---- Secrets ----
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
SMTP_HOST = os.getenv("SMTP_HOST")
SMTP_PORT = os.getenv("SMTP_PORT")
SMTP_USER = os.getenv("SMTP_USER")
SMTP_PASS = os.getenv("SMTP_PASS")
SMTP_EMAIL = os.getenv("SMTP_EMAIL")
SMTP_NAME = os.getenv("SMTP_NAME")

if not OPENAI_API_KEY:
    st.error("‚ö† OPENAI_API_KEY is missing in Streamlit Secrets!")
    st.stop()

# ---- Initialize OpenAI (correct version) ----
openai.api_key = OPENAI_API_KEY

# ---- Input section ----
st.header("üìÖ Create your AI Study Plan")
email = st.text_input("Enter your email:")
study_goal = st.text_input("What do you want to study or improve?")
duration = st.selectbox("Select your plan type:", ["Daily", "Weekly", "Monthly"])

# ---- Generate plan ----
if st.button("Generate Study Plan"):
    with st.spinner("Generating your personalized study plan..."):
        try:
            prompt = f"Create a {duration.lower()} study plan for {study_goal}. Include times, breaks, and productivity tips."
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}]
            )
            plan_text = response.choices[0].message.content

            st.success("‚úÖ Study plan generated successfully!")
            st.text_area("üìã Your Study Plan:", plan_text, height=350)

            # ---- HTML Email ----
            plan_html = plan_text.replace("\n", "<br>")

            html_content = f"""
            <html>
            <body style="font-family: Arial; background-color: #f5f7fa; padding: 20px;">
                <div style="background: white; border-radius: 15px; padding: 25px; box-shadow: 0 4px 10px rgba(0,0,0,0.1);">
                    <h2 style="color: #0072FF;">üìò Your {duration} Study Plan</h2>
                    <p>{plan_html}</p>
                    <hr>
                    <p style="color: #888;">Generated by <b>Pa√Ørent AI Student Planner</b></p>
                </div>
            </body>
            </html>
            """

            if email:
                msg = MIMEMultipart("alternative")
                msg["Subject"] = f"Your {duration} Study Plan ‚Äî Pa√Ørent AI"
                msg["From"] = f"{SMTP_NAME} <{SMTP_EMAIL}>"
                msg["To"] = email
                msg.attach(MIMEText(html_content, "html"))

                context = ssl.create_default_context()
                with smtplib.SMTP(SMTP_HOST, int(SMTP_PORT)) as server:
                    server.starttls(context=context)
                    server.login(SMTP_USER, SMTP_PASS)
                    server.sendmail(SMTP_EMAIL, email, msg.as_string())

                st.info(f"üìß Your {duration} plan has been emailed to {email}!")

        except Exception as e:
            st.error(f"‚ùå Error: {e}")
